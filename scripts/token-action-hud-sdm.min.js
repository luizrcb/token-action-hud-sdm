const t={ID:"token-action-hud-sdm"},i={ID:"token-action-hud-core"},e="2.0.16",a={ability:"Ability",save:"Save",attack:"Attack",roll:"Roll",item:"Item",damage:"Damage",power:"Power",heroDice:"Hero Dice"},s={abilities:{id:"abilities",name:"SDM.FieldAbilitiesPl",type:"system"},saves:{id:"saves",name:"SDM.FieldSavePl",type:"system"},attacks:{id:"attacks",name:"SDM.FieldAttackPl",type:"system"},player:{id:"player",name:"TYPES.Actor.character",type:"system"},npc:{id:"npc",name:"TYPES.Actor.npc",type:"system"},caravan:{id:"caravan",name:"TYPES.Actor.caravan",type:"system"},album:{id:"power_album",name:"TYPES.Item.power_album",type:"system"},weapon:{id:"weapon",name:"TYPES.Item.weapon",type:"system"},power:{id:"power",name:"TYPES.Item.power",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"}},n={power_album:{groupId:"power_album"},power:{groupId:"power"},weapon:{groupId:"weapon"}};let o=null;Hooks.once("tokenActionHudCoreApiReady",(async i=>{o=class Utils{static getSetting(e,a=null){let s=a??null;try{s=game.settings.get(t.ID,e)}catch{i.api.Logger.debug(`Setting '${e}' not found`)}return s}static async setSetting(e,a){try{a=await game.settings.set(t.ID,e,a),i.api.Logger.debug(`Setting '${e}' set to '${a}'`)}catch{i.api.Logger.debug(`Setting '${e}' not found`)}}static toPascalCase(t){return t.toLowerCase().replace(/(^|\s)(\p{L})/gu,((t,i,e)=>i+e.toUpperCase()))}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{l=class ActionHandler extends t.api.ActionHandler{a;async buildSystemActions(i){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.actor){let i=this.actor.items;i=t.api.Utils.sortItemsByName(i),this.items=i}"character"===this.actorType?this.#t():"npc"===this.actorType?this.#i():"caravan"===this.actorType&&this.#e()}#t(){this.#a(),this.#s(),this.#n(),this.#o(),this.#l()}#i(){this.#c(),this.#r(),this.#l()}async#a(){if(!this.actor)return;const i=[{id:`${this.actor.id}-str`,name:t.api.Utils.i18n("SDM.AbilityStrAbbr").toUpperCase(),tooltip:t.api.Utils.i18n("SDM.AbilityStr"),listName:"Ability: Strength",encodedValue:"ability|str"},{id:`${this.actor.id}-end`,name:t.api.Utils.i18n("SDM.AbilityEndAbbr").toUpperCase(),tooltip:t.api.Utils.i18n("SDM.AbilityEnd"),listName:"Ability: Endurance",encodedValue:"ability|end"},{id:`${this.actor.id}-agi`,name:t.api.Utils.i18n("SDM.AbilityAgiAbbr").toUpperCase(),tooltip:t.api.Utils.i18n("SDM.AbilityAgi"),listName:"Ability: Agility",encodedValue:"ability|agi"},{id:`${this.actor.id}-cha`,name:t.api.Utils.i18n("SDM.AbilityChaAbbr").toUpperCase(),tooltip:t.api.Utils.i18n("SDM.AbilityCha"),listName:"Ability: Charisma",encodedValue:"ability|cha"},{id:`${this.actor.id}-aur`,name:t.api.Utils.i18n("SDM.AbilityAurAbbr").toUpperCase(),tooltip:t.api.Utils.i18n("SDM.AbilityAur"),listName:"Ability: Aura",encodedValue:"ability|aur"},{id:`${this.actor.id}-tho`,name:t.api.Utils.i18n("SDM.AbilityThoAbbr").toUpperCase(),tooltip:t.api.Utils.i18n("SDM.AbilityTho"),listName:"Ability: Thought",encodedValue:"ability|tho"}];this.addActions(i,{id:"abilities",type:"system"})}async#s(){if(!this.actor)return;const i=[{id:`${this.actor.id}-save-str`,name:t.api.Utils.i18n("SDM.AbilityStrAbbr").toUpperCase(),icon1:'<i class="fa-solid fa-hand-fist rust"></i>',tooltip:game.i18n.format("SDM.SavingThrowRoll",{ability:t.api.Utils.i18n("SDM.AbilityStr")}),listName:"Save: Strength",encodedValue:"save|str"},{id:`${this.actor.id}-save-end`,name:t.api.Utils.i18n("SDM.AbilityEndAbbr").toUpperCase(),icon1:'<i class="fa-solid fa-heartbeat pumpkin"></i>',tooltip:game.i18n.format("SDM.SavingThrowRoll",{ability:t.api.Utils.i18n("SDM.AbilityEnd")}),listName:"Save: Endurance",encodedValue:"save|end"},{id:`${this.actor.id}-save-agi`,name:t.api.Utils.i18n("SDM.AbilityAgiAbbr").toUpperCase(),icon1:'<i class="fa-solid fa-person-running amber"></i>',tooltip:game.i18n.format("SDM.SavingThrowRoll",{ability:t.api.Utils.i18n("SDM.AbilityAgi")}),listName:"Save: Agility",encodedValue:"save|agi"},{id:`${this.actor.id}-save-cha`,name:t.api.Utils.i18n("SDM.AbilityChaAbbr").toUpperCase(),icon1:'<i class="fa-solid fa-clover sky"></i>',tooltip:game.i18n.format("SDM.SavingThrowRoll",{ability:t.api.Utils.i18n("SDM.AbilityCha")}),listName:"Save: Charisma",encodedValue:"save|cha"},{id:`${this.actor.id}-save-aur`,name:t.api.Utils.i18n("SDM.AbilityAurAbbr").toUpperCase(),icon1:'<i class="fa-solid fa-splotch azure"></i>',tooltip:game.i18n.format("SDM.SavingThrowRoll",{ability:t.api.Utils.i18n("SDM.AbilityAur")}),listName:"Save: Aura",encodedValue:"save|aur"},{id:`${this.actor.id}-save-tho`,name:t.api.Utils.i18n("SDM.AbilityThoAbbr").toUpperCase(),icon1:'<i class="fa-solid fa-cloud royal"></i>',tooltip:game.i18n.format("SDM.SavingThrowRoll",{ability:t.api.Utils.i18n("SDM.AbilityTho")}),listName:"Save: Thought",encodedValue:"save|tho"}];this.addActions(i,{id:"saves",type:"system"})}async#n(){if(!this.actor)return;const i=[{id:`${this.actor.id}-melee`,name:t.api.Utils.i18n("SDM.AttackMelee"),listName:"Attack: Melee",encodedValue:"attack|melee"},{id:`${this.actor.id}-ranged`,name:t.api.Utils.i18n("SDM.AttackRanged"),listName:"Attack: Ranged",encodedValue:"attack|ranged"},{id:`${this.actor.id}-fantascience`,name:t.api.Utils.i18n("SDM.AttackFantascience"),listName:"Attack: Fantascience",encodedValue:"attack|fantascience"},{id:`${this.actor.id}-oldtech`,name:t.api.Utils.i18n("SDM.AttackOldtech"),listName:"Attack: Oldtech",encodedValue:"attack|oldtech"}];this.addActions(i,{id:"attacks",type:"system"})}async#o(){if(!this.actor)return;const i=this.actor.system.hero_dice,e=[{id:`${this.actor.id}-reaction`,name:t.api.Utils.i18n("SDM.Reaction"),icon1:'<i class="fa-solid fa-masks-theater"></i>',listName:"Other: Reaction",encodedValue:"reaction|reaction"},{id:`${this.actor.id}-hero-dice`,name:`${o.toPascalCase(t.api.Utils.i18n("SDM.HeroDice"))}: ${i.value}/${i.max}`,icon1:'<i class="fa-solid fa-dice-d6"></i>',tooltip:o.toPascalCase(t.api.Utils.i18n("SDM.HeroDice")),listName:"Other: Hero Dice",encodedValue:"heroichealing|heroichealing"}];this.addActions(e,{id:"player",type:"system"})}async#c(){const i=game.settings.get("token-action-hud-core","style"),e=[{id:`${this.actor.id}-attack`,name:game.i18n.format("SDM.RollType",{type:t.api.Utils.i18n("SDM.Attack")}),tooltip:game.i18n.format("SDM.RollType",{type:t.api.Utils.i18n("SDM.Attack")}),icon1:`<i class="melee-attack ${i.includes("Light")||i.includes("pathfinder")?"":"white"}"></i>`,listName:"attack: Attack Roll",encodedValue:"attack|attack"},{id:`${this.actor.id}-damage`,name:game.i18n.format("SDM.RollType",{type:t.api.Utils.i18n("SDM.Damage")}),tooltip:game.i18n.format("SDM.RollType",{type:t.api.Utils.i18n("SDM.Damage")}),icon1:'<i class="fa-solid fa-explosion"></i>',listName:"Damage: rollNPCDamage",encodedValue:"rollNPCDamage|rollNPCDamage"}];this.addActions(e,{id:"attacks",type:"system"});const a=[{id:`${this.actor.id}-save`,name:game.i18n.format("SDM.RollType",{type:t.api.Utils.i18n("SDM.FieldSaveTarget")}),tooltip:game.i18n.format("SDM.SavingThrowRoll",{ability:t.api.Utils.i18n("TYPES.Actor.npc")}),icon1:'<i class="fa fa-shield-cat"></i>',listName:"attack: Attack Roll",encodedValue:"save|npc"}];this.addActions(a,{id:"saves",type:"system"})}async#r(){if(!this.actor)return;const i=[{id:`${this.actor.id}-morale`,name:game.i18n.format("SDM.RollType",{type:t.api.Utils.i18n("SDM.Morale")}),icon1:'<i class="fa-solid fa-person-running"></i>',listName:"Other: Morale",encodedValue:"rollNPCMorale|rollNPCMorale"}];this.addActions(i,{id:"npc",type:"system"})}async#e(){const i=[{id:`${this.actor.id}-consume-supply`,name:t.api.Utils.i18n("SDM.ConsumeSupply"),icon1:'<i class="fa fa-sack-xmark"></i>',listName:"Other: Consume Supplies",encodedValue:"consumeSupplies|consumeSupplies"}];this.addActions(i,{id:"caravan",type:"system"})}async#l(){if(0===this.items.size)return;const i="item",e=new Map;for(const[t,i]of this.items){const a=i.system.type,s=e.get(a)??new Map;s.set(t,i),e.set(a,s)}for(const[s,o]of e){const e=n[s]?.groupId;if(!e)continue;const l={id:e,type:"system"},c=[...o].map((([e,s])=>{const n=e,o=s.getNameTitle(),l=t.api.Utils.i18n(a[i]),c=`${l?`${l}: `:""}${o}`,r=[i,n].join(this.delimiter),d=s.system.status,p=s.system.resources,m="broken"===d,y="run_out"===p,u="notched"===d?'<i class="fa fa-hammer"></i>':"broken"===d?'<i class="fa fa-ban"></i>':"",h="running_low"===p?'<i class="fa-solid fa-battery-quarter"></i>':"run_out"===p?'<i class="fa-solid fa-battery-empty"></i>':"",b=s.system.readied?'<i class="fa fa-shield"></i>':"";return{id:n,name:o,img:t.api.Utils.getImage(s),icon1:u,icon2:h,icon3:b,cssClass:m||y?"disabled":"",tooltip:s.getInventoryTitle(),listName:c,encodedValue:r}}));this.addActions(c,l)}}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{c=class RollHandler extends t.api.RollHandler{async handleActionClick(t,i){const[e,a]=i.split("|"),s=["character"];if(this.actor)return void await this.#d(t,this.actor,this.token,e,a);const n=canvas.tokens.controlled.filter((t=>s.includes(t.actor?.type)));for(const i of n){const s=i.actor;await this.#d(t,s,i,e,a)}}async handleActionHover(t,i){}async handleGroupClick(t,i){}async#d(t,i,e,a,s){switch(a){case"ability":case"save":case"attack":case"reaction":case"heroichealing":case"rollNPCDamage":case"rollNPCMorale":this.#p(t,i,a,s);break;case"item":this.#m(t,i,s);break;case"consumeSupplies":this.#y(t,i)}}async#m(i,e,a){const s=!!i.ctrlKey,n=!!i.shiftKey,l=!!i.altKey,c=e.items.get(a),r="broken"===c.system.status,d="run_out"===c.system.resources;if(2===i.button){if(l)return await c.sendToChat({actor:e,collapsed:!1});await c.sheet.render({force:!0})}else{if(r||d)return;if(l)return await c.toggleReadied();if(!c.system.readied)return;const i="weapon"===c.system.type?"damage":c.system.type;await e.performHudAction(i,a,{label:c.name,tooltip:game.i18n.format("SDM.RollType",{type:t.api.Utils.i18n(`SDM.${o.toPascalCase(i)}`)})},n,s)}}async#p(t,i,e,a){const s=!!t.ctrlKey,n=!!t.shiftKey;await i.performHudAction(e,a,{},n,s)}async#y(t,i){return await i.consumeSupplies()}}}));let r=null;function register(t){}Hooks.once("tokenActionHudCoreApiReady",(async t=>{const i=s;Object.values(i).forEach((i=>{i.name=t.api.Utils.i18n(i.name),i.listName=`Group: ${t.api.Utils.i18n(i.listName??i.name)}`}));const e=Object.values(i);r={layout:[{nestId:"abilities",id:"abilities",name:t.api.Utils.i18n("SDM.FieldAbilitiesPl"),groups:[{...i.abilities,nestId:"abilities_abilities"}]},{nestId:"saves",id:"saves",name:t.api.Utils.i18n("SDM.FieldSavePl"),groups:[{...i.saves,nestId:"saves_saves"}]},{nestId:"attacks",id:"attacks",name:t.api.Utils.i18n("SDM.FieldAttackPl"),groups:[{...i.attacks,nestId:"attacks_attacks"}]},{nestId:"other",id:"other",name:t.api.Utils.i18n("SDM.FieldOther"),groups:[{...i.player,nestId:"other_player"},{...i.caravan,nestId:"other_caravan"},{...i.npc,nestId:"other_npc"}]},{nestId:"inventory",id:"inventory",name:t.api.Utils.i18n("SDM.TabInventory"),groups:[{...i.album,nestId:"inventory_album"},{...i.power,nestId:"inventory_power"},{...i.weapon,nestId:"inventory_weapon"}]}],groups:e}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async i=>{d=class SystemManager extends i.api.SystemManager{getActionHandler(){return new l}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(t){let i;return i=new c,i}async registerDefaults(){return r}registerSettings(t){}registerStyles(){return{sdm:{class:"tah-style-sdm-style",file:"tah-sdm-style",moduleId:t.ID,name:"Synthetic Dream Machine Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const i=game.modules.get(t.ID);i.api={requiredCoreModuleVersion:"2.0.16",SystemManager:d},Hooks.call("tokenActionHudSystemReady",i)}));export{a as ACTION_TYPE,l as ActionHandler,i as CORE_MODULE,r as DEFAULTS,s as GROUP,n as ITEM_TYPE,t as MODULE,e as REQUIRED_CORE_MODULE_VERSION,c as RollHandler,d as SystemManager,o as Utils,register};
//# sourceMappingURL=token-action-hud-sdm.min.js.map
