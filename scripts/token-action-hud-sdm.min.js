const e={ID:"token-action-hud-sdm"},t={ID:"token-action-hud-core"},i="2.0.16",a={ability:"Ability",save:"Save",attack:"Attack",roll:"Roll",item:"Item",damage:"Damage",power:"Power",heroDice:"Hero Dice"},s={abilities:{id:"abilities",name:"Abilities",type:"system"},saves:{id:"saves",name:"Saves",type:"system"},attacks:{id:"attacks",name:"Attacks",type:"system"},player:{id:"player",name:"Player",type:"system"},npc:{id:"npc",name:"NPC",type:"system"},album:{id:"power_album",name:"Album of Power",type:"system"},weapon:{id:"weapon",name:"Weapon",type:"system"},power:{id:"power",name:"Power",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"}},o={power_album:{groupId:"power_album"},power:{groupId:"power"},weapon:{groupId:"weapon"}};let n=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=s;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const i=Object.values(t);n={layout:[{nestId:"abilities",id:"abilities",name:e.api.Utils.i18n("SDM.FieldAbilitiesPl"),groups:[{...t.abilities,nestId:"abilities_abilities"}]},{nestId:"saves",id:"saves",name:e.api.Utils.i18n("SDM.FieldSavePl"),groups:[{...t.saves,nestId:"saves_saves"}]},{nestId:"attacks",id:"attacks",name:e.api.Utils.i18n("SDM.FieldAttackPl"),groups:[{...t.attacks,nestId:"attacks_attacks"}]},{nestId:"other",id:"other",name:e.api.Utils.i18n("SDM.FieldOther"),groups:[{...t.player,nestId:"other_player"},{...t.npc,nestId:"other_npc"}]},{nestId:"inventory",id:"inventory",name:e.api.Utils.i18n("SDM.TabInventory"),groups:[{...t.album,nestId:"inventory_album"},{...t.power,nestId:"inventory_power"},{...t.weapon,nestId:"inventory_weapon"}]}],groups:i}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{l=class Utils{static getSetting(i,a=null){let s=a??null;try{s=game.settings.get(e.ID,i)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}return s}static async setSetting(i,a){try{a=await game.settings.set(e.ID,i,a),t.api.Logger.debug(`Setting '${i}' set to '${a}'`)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}}static toPascalCase(e){return e.toLowerCase().replace(/(?:^|\s|_|\-)(\w)/g,((e,t)=>t?t.toUpperCase():""))}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{c=class ActionHandler extends e.api.ActionHandler{a;async buildSystemActions(t){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=l.getSetting("displayUnequipped"),this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}"character"===this.actorType?this.#e():this.actor||this.#t()}#e(){this.#i(),this.#a(),this.#s(),this.#o(),this.#n()}#t(){}async#i(){if(!this.actor)return;this.actor.system;const e=[{id:`${this.actor.id}-str`,name:"STR",tooltip:"Strength",listName:"Ability: Strength",encodedValue:"ability|str"},{id:`${this.actor.id}-end`,name:"END",tooltip:"Endurance",listName:"Ability: Endurance",encodedValue:"ability|end"},{id:`${this.actor.id}-agi`,name:"AGI",tooltip:"Agility",listName:"Ability: Agility",encodedValue:"ability|agi"},{id:`${this.actor.id}-cha`,name:"CHA",tooltip:"Charisma",listName:"Ability: Charisma",encodedValue:"ability|cha"},{id:`${this.actor.id}-aur`,name:"AUR",tooltip:"Aura",listName:"Ability: Aura",encodedValue:"ability|aur"},{id:`${this.actor.id}-tho`,name:"THO",tooltip:"Thought",listName:"Ability: Thought",encodedValue:"ability|tho"}];this.addActions(e,{id:"abilities",type:"system"})}async#a(){if(!this.actor)return;this.actor.system,console.log(this.actor.sheet);const e=[{id:`${this.actor.id}-save-str`,name:"STR",icon1:'<i class="fa-solid fa-hand-fist"></i>',tooltip:"Strength Saving Throw",listName:"Save: Strength",encodedValue:"save|str"},{id:`${this.actor.id}-save-end`,name:"END",icon1:'<i class="fa-solid fa-heartbeat"></i>',tooltip:"Endurance Saving Throw",listName:"Save: Endurance",encodedValue:"save|end"},{id:`${this.actor.id}-save-agi`,name:"AGI",icon1:'<i class="fa-solid fa-person-running"></i>',tooltip:"Agility Saving Throw",listName:"Save: Agility",encodedValue:"save|agi"},{id:`${this.actor.id}-save-cha`,name:"CHA",icon1:'<i class="fa-solid fa-clover"></i>',tooltip:"Charisma Saving Throw",listName:"Save: Charisma",encodedValue:"save|cha"},{id:`${this.actor.id}-save-aur`,name:"AUR",icon1:'<i class="fa-solid fa-splotch"></i>',tooltip:"Aura Saving Throw",listName:"Save: Aura",encodedValue:"save|aur"},{id:`${this.actor.id}-save-tho`,name:"THO",icon1:'<i class="fa-solid fa-cloud"></i>',tooltip:"Thought Saving Throw",listName:"Save: Thought",encodedValue:"save|tho"}];this.addActions(e,{id:"saves",type:"system"})}async#s(){if(!this.actor)return;this.actor.system;const e=[{id:`${this.actor.id}-melee`,name:"Melee",listName:"Attack: Melee",tooltip:"",encodedValue:"attack|melee"},{id:`${this.actor.id}-ranged`,name:"Ranged",listName:"Attack: Ranged",tooltip:"",encodedValue:"attack|ranged"},{id:`${this.actor.id}-fantascience`,name:"Fantascience",listName:"Attack: Fantascience",tooltip:"",encodedValue:"attack|fantascience"},{id:`${this.actor.id}-oldtech`,name:"Oldtech",listName:"Attack: Oldtech",tooltip:"",encodedValue:"attack|oldtech"}];this.addActions(e,{id:"attacks",type:"system"})}async#o(){if(!this.actor)return;const e=this.actor.system.hero_dice,t=[{id:`${this.actor.id}-reaction`,name:"Reaction",icon1:'<i class="fa-solid fa-masks-theater"></i>',tooltip:"Reaction",listName:"Other: Reaction",encodedValue:"reaction|reaction"},{id:`${this.actor.id}-hero-dice`,name:`Hero Dice: ${e.value}/${e.max}`,icon1:'<i class="fa-solid fa-dice-d6"></i>',tooltip:"Hero Dice",listName:"Other: Hero Dice",encodedValue:"heroichealing|heroichealing"}];this.addActions(t,{id:"player",type:"system"})}async#n(){if(0===this.items.size)return;const t="item",i=new Map;for(const[e,t]of this.items){const a=t.system,s=a.type;if(a.readied||this.displayUnequipped){const a=i.get(s)??new Map;a.set(e,t),i.set(s,a)}}for(const[s,n]of i){const i=o[s]?.groupId;if(!i)continue;const l={id:i,type:"system"},c=[...n].map((([i,s])=>{const o=i,n=s.getNameTitle(),l=e.api.Utils.i18n(a[t]),c=`${l?`${l}: `:""}${n}`,r=[t,o].join(this.delimiter),d=s.system.status,m=s.system.resources,h="broken"===d,u="run_out"===m;let p="notched"===d?'<i class="fa fa-hammer"></i>':"broken"===d?'<i class="fa fa-ban"></i>':"",y="running_low"===m?'<i class="fa-solid fa-battery-quarter"></i>':"run_out"===m?'<i class="fa-solid fa-battery-empty"></i>':"",g=s.system.readied?'<i class="fa fa-shield"></i>':"";return{id:o,name:n,img:e.api.Utils.getImage(s),icon1:p,icon2:y,icon3:g,cssClass:h||u?"disabled":"",tooltip:s.getInventoryTitle(),listName:c,encodedValue:r}}));this.addActions(c,l)}}}}));let r=null;function register(t){game.settings.register(e.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.sdm.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.sdm.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{r=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const[i,a]=t.split("|"),s=["character"];if(this.actor)return void await this.#l(e,this.actor,this.token,i,a);const o=canvas.tokens.controlled.filter((e=>s.includes(e.actor?.type)));for(const t of o){const s=t.actor;await this.#l(e,s,t,i,a)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#l(e,t,i,a,s){switch(a){case"ability":case"save":case"attack":case"reaction":case"heroichealing":this.#c(e,t,a,s);break;case"item":this.#r(e,t,s)}}async#r(t,i,a){const s=!!t.ctrlKey,o=!!t.shiftKey,n=!!t.altKey,c=i.items.get(a),r="broken"===c.system.status,d="run_out"===c.system.resources;if(2==t.button){if(n)return await c.sendToChat({actor:i,collapsed:!1});await c.sheet.render({force:!0})}else{if(r||d)return;if(n)return await c.toggleReadied();if(!c.system.readied)return;const t="weapon"===c.system.type?"damage":c.system.type;await i.performHudAction(t,a,{label:c.name,tooltip:game.i18n.format("SDM.RollType",{type:e.api.Utils.i18n(`SDM.${l.toPascalCase(t)}`)})},o,s)}}async#c(e,t,i,a){const s=!!e.ctrlKey,o=!!e.shiftKey;await t.performHudAction(i,a,{},o,s)}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class SystemManager extends t.api.SystemManager{getActionHandler(){return new c}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(e){let t;return t=new r,t}async registerDefaults(){return n}registerSettings(e){register(e)}registerStyles(){return{sdm:{class:"tah-style-sdm-style",file:"tah-sdm-style",moduleId:e.ID,name:"Synthetic Dream Machine Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"2.0.16",SystemManager:d},Hooks.call("tokenActionHudSystemReady",t)}));export{a as ACTION_TYPE,c as ActionHandler,t as CORE_MODULE,n as DEFAULTS,s as GROUP,o as ITEM_TYPE,e as MODULE,i as REQUIRED_CORE_MODULE_VERSION,r as RollHandler,d as SystemManager,l as Utils,register};
//# sourceMappingURL=token-action-hud-sdm.min.js.map
