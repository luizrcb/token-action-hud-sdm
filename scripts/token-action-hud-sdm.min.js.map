{"version":3,"file":"token-action-hud-sdm.min.js","sources":["constants.js","defaults.js","utils.js","action-handler.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n  ID: \"token-action-hud-sdm\",\n};\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n  ID: \"token-action-hud-core\",\n};\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = \"2.0.16\";\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n  ability: \"Ability\",\n  save: \"Save\",\n  attack: \"Attack\",\n  roll: \"Roll\",\n  item: \"Item\",\n  damage: \"Damage\",\n  power: \"Power\",\n  heroDice: \"Hero Dice\",\n};\n\n/**\n * Groups\n */\nexport const GROUP = {\n  abilities: { id: \"abilities\", name: \"Abilities\", type: \"system\" },\n  saves: { id: \"saves\", name: \"Saves\", type: \"system\" },\n  attacks: { id: \"attacks\", name: \"Attacks\", type: \"system\" },\n  player: { id: \"player\", name: \"Player\", type: \"system\" },\n  npc: { id: \"npc\", name: \"NPC\", type: \"system\" },\n  //armor: { id: \"armor\", name: \"Armor\", type: \"system\" },\n  album: {\n    id: \"power_album\",\n    name: \"Album of Power\",\n    type: \"system\",\n  },\n  weapon: { id: \"weapon\", name: \"Weapon\", type: \"system\" },\n //  ward: { id: \"ward\", name: \"Ward\", type: \"system\" },\n  power: { id: \"power\", name: \"Power\", type: \"system\" },\n\n  combat: { id: \"combat\", name: \"tokenActionHud.combat\", type: \"system\" },\n  token: { id: \"token\", name: \"tokenActionHud.token\", type: \"system\" },\n};\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n  power_album: { groupId: \"power_album\" },\n  // armor: { groupId: \"armor\" },\n  power: { groupId: \"power\" },\n  // ward: { groupId: \"ward\" },\n  weapon: { groupId: \"weapon\" },\n};\n","import { GROUP } from \"./constants.js\";\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  const groups = GROUP;\n  Object.values(groups).forEach((group) => {\n    group.name = coreModule.api.Utils.i18n(group.name);\n    group.listName = `Group: ${coreModule.api.Utils.i18n(\n      group.listName ?? group.name\n    )}`;\n  });\n  const groupsArray = Object.values(groups);\n  DEFAULTS = {\n    layout: [\n      {\n        nestId: \"abilities\",\n        id: \"abilities\",\n        name: coreModule.api.Utils.i18n(\"SDM.FieldAbilitiesPl\"),\n        groups: [{ ...groups.abilities, nestId: \"abilities_abilities\" }],\n      },\n      {\n        nestId: \"saves\",\n        id: \"saves\",\n        name: coreModule.api.Utils.i18n(\"SDM.FieldSavePl\"),\n        groups: [{ ...groups.saves, nestId: \"saves_saves\" }],\n      },\n      {\n        nestId: \"attacks\",\n        id: \"attacks\",\n        name: coreModule.api.Utils.i18n(\"SDM.FieldAttackPl\"),\n        groups: [{ ...groups.attacks, nestId: \"attacks_attacks\" }],\n      },\n      {\n        nestId: \"other\",\n        id: \"other\",\n        name: coreModule.api.Utils.i18n(\"SDM.FieldOther\"),\n        groups: [\n          { ...groups.player, nestId: \"other_player\" },\n          { ...groups.npc, nestId: \"other_npc\" },\n        ],\n      },\n      {\n        nestId: \"inventory\",\n        id: \"inventory\",\n        name: coreModule.api.Utils.i18n(\"SDM.TabInventory\"),\n        groups: [\n          { ...groups.album, nestId: \"inventory_album\" },\n          //{ ...groups.armor, nestId: \"inventory_armor\" },\n          { ...groups.power, nestId: \"inventory_power\" },\n          //{ ...groups.ward, nestId: \"inventory_ward\" },\n          { ...groups.weapon, nestId: \"inventory_weapon\" },\n        ],\n      },\n      // {\n      //   nestId: \"utility\",\n      //   id: \"utility\",\n      //   name: coreModule.api.Utils.i18n(\"tokenActionHud.utility\"),\n      //   groups: [\n      //     { ...groups.combat, nestId: \"utility_combat\" },\n      //     { ...groups.token, nestId: \"utility_token\" },\n      //     { ...groups.utility, nestId: \"utility_utility\" },\n      //   ],\n      // },\n    ],\n    groups: groupsArray,\n  };\n});\n","import { MODULE } from \"./constants.js\";\n\nexport let Utils = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  /**\n   * Utility functions\n   */\n  Utils = class Utils {\n    /**\n     * Get setting\n     * @param {string} key               The key\n     * @param {string=null} defaultValue The default value\n     * @returns {string}                 The setting value\n     */\n    static getSetting(key, defaultValue = null) {\n      let value = defaultValue ?? null;\n      try {\n        value = game.settings.get(MODULE.ID, key);\n      } catch {\n        coreModule.api.Logger.debug(`Setting '${key}' not found`);\n      }\n      return value;\n    }\n\n    /**\n     * Set setting\n     * @param {string} key   The key\n     * @param {string} value The value\n     */\n    static async setSetting(key, value) {\n      try {\n        value = await game.settings.set(MODULE.ID, key, value);\n        coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`);\n      } catch {\n        coreModule.api.Logger.debug(`Setting '${key}' not found`);\n      }\n    }\n\n    static toPascalCase(str) {\n      return str\n        .toLowerCase()\n        .replace(/(?:^|\\s|_|\\-)(\\w)/g, (_, c) => (c ? c.toUpperCase() : \"\"));\n    }\n  };\n});\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE } from \"./constants.js\";\nimport { Utils } from \"./utils.js\";\n\nexport let ActionHandler = null;\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n   */\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    /**\n     * Build system actions\n     * Called by Token Action HUD Core\n     * @override\n     * @param {array} groupIds\n     */ a;\n    async buildSystemActions(groupIds) {\n      // Set actor and token variables\n      this.actors = !this.actor ? this._getActors() : [this.actor];\n      this.actorType = this.actor?.type;\n\n      // Settings\n      this.displayUnequipped = Utils.getSetting(\"displayUnequipped\");\n\n      // Set items variable\n      if (this.actor) {\n        let items = this.actor.items;\n        items = coreModule.api.Utils.sortItemsByName(items);\n        this.items = items;\n      }\n\n      if (this.actorType === \"character\") {\n        this.#buildCharacterActions();\n      } else if (!this.actor) {\n        this.#buildMultipleTokenActions();\n      }\n    }\n\n    /**\n     * Build character actions\n     * @private\n     */\n    #buildCharacterActions() {\n      this.#buildAbilities();\n      this.#buildSaves();\n      this.#buildAttacks();\n      this.#buildOther();\n      this.#buildInventory();\n    }\n\n    /**\n     * Build multiple token actions\n     * @private\n     * @returns {object}\n     */\n    #buildMultipleTokenActions() {}\n\n    async #buildAbilities() {\n      if (!this.actor) return;\n\n      const data = this.actor.system;\n      // const abilities = data.abilities;\n      const groupData = { id: \"abilities\", type: \"system\" };\n      const actions = [\n        {\n          id: `${this.actor.id}-str`,\n          name: \"STR\",\n          //icon1: `<i class=\"fa-solid fa-hand-fist\" data-tooltip=\"Strength\"></i>`,\n          tooltip: \"Strength\",\n          listName: \"Ability: Strength\",\n          encodedValue: \"ability|str\",\n        },\n        {\n          id: `${this.actor.id}-end`,\n          name: \"END\",\n          //icon1: `<i class=\"fa-solid fa-heartbeat\" data-tooltip=\"Endurance\"></i>`,\n          tooltip: \"Endurance\",\n          listName: \"Ability: Endurance\",\n          encodedValue: \"ability|end\",\n        },\n        {\n          id: `${this.actor.id}-agi`,\n          name: \"AGI\",\n          //icon1: `<i class=\"fa-solid fa-person-running\" data-tooltip=\"Agility\"></i>`,\n          tooltip: \"Agility\",\n          listName: \"Ability: Agility\",\n          encodedValue: \"ability|agi\",\n        },\n        {\n          id: `${this.actor.id}-cha`,\n          name: \"CHA\",\n          tooltip: \"Charisma\",\n          listName: \"Ability: Charisma\",\n          encodedValue: \"ability|cha\",\n        },\n        {\n          id: `${this.actor.id}-aur`,\n          name: \"AUR\",\n          tooltip: \"Aura\",\n          listName: \"Ability: Aura\",\n          encodedValue: \"ability|aur\",\n        },\n        {\n          id: `${this.actor.id}-tho`,\n          name: \"THO\",\n          tooltip: \"Thought\",\n          listName: \"Ability: Thought\",\n          encodedValue: \"ability|tho\",\n        },\n      ];\n      this.addActions(actions, groupData);\n    }\n\n    async #buildSaves() {\n      if (!this.actor) return;\n\n      const data = this.actor.system;\n      console.log(this.actor.sheet);\n      // const abilities = data.abilities;\n      const groupData = { id: \"saves\", type: \"system\" };\n      const actions = [\n        {\n          id: `${this.actor.id}-save-str`,\n          name: \"STR\",\n          icon1: `<i class=\"fa-solid fa-hand-fist\"></i>`,\n          tooltip: \"Strength Saving Throw\",\n          listName: \"Save: Strength\",\n          encodedValue: \"save|str\",\n        },\n        {\n          id: `${this.actor.id}-save-end`,\n          name: \"END\",\n          icon1: `<i class=\"fa-solid fa-heartbeat\"></i>`,\n          tooltip: \"Endurance Saving Throw\",\n          listName: \"Save: Endurance\",\n          encodedValue: \"save|end\",\n        },\n        {\n          id: `${this.actor.id}-save-agi`,\n          name: \"AGI\",\n          icon1: `<i class=\"fa-solid fa-person-running\"></i>`,\n          tooltip: \"Agility Saving Throw\",\n          listName: \"Save: Agility\",\n          encodedValue: \"save|agi\",\n        },\n        {\n          id: `${this.actor.id}-save-cha`,\n          name: \"CHA\",\n          icon1: `<i class=\"fa-solid fa-clover\"></i>`,\n          tooltip: \"Charisma Saving Throw\",\n          listName: \"Save: Charisma\",\n          encodedValue: \"save|cha\",\n        },\n        {\n          id: `${this.actor.id}-save-aur`,\n          name: \"AUR\",\n          icon1: `<i class=\"fa-solid fa-splotch\"></i>`,\n          tooltip: \"Aura Saving Throw\",\n          listName: \"Save: Aura\",\n          encodedValue: \"save|aur\",\n        },\n        {\n          id: `${this.actor.id}-save-tho`,\n          name: \"THO\",\n          icon1: `<i class=\"fa-solid fa-cloud\"></i>`,\n          tooltip: \"Thought Saving Throw\",\n          listName: \"Save: Thought\",\n          encodedValue: \"save|tho\",\n        },\n      ];\n      this.addActions(actions, groupData);\n    }\n\n    async #buildAttacks() {\n      if (!this.actor) return;\n\n      const data = this.actor.system;\n      // const abilities = data.abilities;\n      const groupData = { id: \"attacks\", type: \"system\" };\n      const actions = [\n        {\n          id: `${this.actor.id}-melee`,\n          name: \"Melee\",\n          listName: \"Attack: Melee\",\n          tooltip: \"\",\n          encodedValue: \"attack|melee\",\n        },\n        {\n          id: `${this.actor.id}-ranged`,\n          name: \"Ranged\",\n          listName: \"Attack: Ranged\",\n          tooltip: \"\",\n          encodedValue: \"attack|ranged\",\n        },\n        {\n          id: `${this.actor.id}-fantascience`,\n          name: \"Fantascience\",\n          listName: \"Attack: Fantascience\",\n          tooltip: \"\",\n          encodedValue: \"attack|fantascience\",\n        },\n        {\n          id: `${this.actor.id}-oldtech`,\n          name: \"Oldtech\",\n          listName: \"Attack: Oldtech\",\n          tooltip: \"\",\n          encodedValue: \"attack|oldtech\",\n        },\n      ];\n      this.addActions(actions, groupData);\n    }\n\n    async #buildOther() {\n      if (!this.actor) return;\n\n      //const data = this.actor.system;\n      const hero_dice = this.actor.system.hero_dice;\n      const groupData = { id: \"player\", type: \"system\" };\n\n      const actions = [\n        {\n          id: `${this.actor.id}-reaction`,\n          name: \"Reaction\",\n          icon1: `<i class=\"fa-solid fa-masks-theater\"></i>`,\n          tooltip: \"Reaction\",\n          listName: \"Other: Reaction\",\n          encodedValue: \"reaction|reaction\",\n        },\n        {\n          id: `${this.actor.id}-hero-dice`,\n          name: `Hero Dice: ${hero_dice.value}/${hero_dice.max}`,\n          icon1: `<i class=\"fa-solid fa-dice-d6\"></i>`,\n          tooltip: \"Hero Dice\",\n          listName: \"Other: Hero Dice\",\n          encodedValue: \"heroichealing|heroichealing\",\n        },\n      ];\n\n      this.addActions(actions, groupData);\n    }\n\n    /**\n     * Build inventory\n     * @private\n     */\n    async #buildInventory() {\n      if (this.items.size === 0) return;\n\n      const actionTypeId = \"item\";\n      const inventoryMap = new Map();\n\n      for (const [itemId, itemData] of this.items) {\n        const system = itemData.system;\n        const type = system.type;\n        const equipped = system.readied;\n\n        if (equipped || this.displayUnequipped) {\n          const typeMap = inventoryMap.get(type) ?? new Map();\n          typeMap.set(itemId, itemData);\n          inventoryMap.set(type, typeMap);\n        }\n      }\n\n      for (const [type, typeMap] of inventoryMap) {\n        const groupId = ITEM_TYPE[type]?.groupId;\n\n        if (!groupId) continue;\n\n        const groupData = { id: groupId, type: \"system\" };\n\n        // Get actions\n        const actions = [...typeMap].map(([itemId, itemData]) => {\n          const id = itemId;\n          const name = itemData.getNameTitle();\n          const actionTypeName = coreModule.api.Utils.i18n(\n            ACTION_TYPE[actionTypeId]\n          );\n          const listName = `${\n            actionTypeName ? `${actionTypeName}: ` : \"\"\n          }${name}`;\n          const encodedValue = [actionTypeId, id].join(this.delimiter);\n          const status = itemData.system.status;\n          const resources = itemData.system.resources;\n\n          const brokenItem = status === 'broken';\n          const runOutItem = resources === 'run_out';\n\n          let icon1 = status === 'notched' ? `<i class=\"fa fa-hammer\"></i>` : status === 'broken' ? `<i class=\"fa fa-ban\"></i>` : ''; \n          let icon2 = resources === 'running_low' ? \n          `<i class=\"fa-solid fa-battery-quarter\"></i>` :\n           resources === 'run_out' ? `<i class=\"fa-solid fa-battery-empty\"></i>` : ''; \n          let icon3 = itemData.system.readied ? '<i class=\"fa fa-shield\"></i>' : '';\n\n          return {\n            id,\n            name,\n            img: coreModule.api.Utils.getImage(itemData),\n            icon1,\n            icon2,\n            icon3,\n            cssClass: (brokenItem || runOutItem) ? 'disabled': '', \n            tooltip: itemData.getInventoryTitle(),\n            listName,\n            encodedValue,\n          };\n        });\n\n        // TAH Core method to add actions to the action list\n        this.addActions(actions, groupData);\n      }\n    }\n  };\n});\n","export let RollHandler = null;\nimport { Utils } from \"./utils.js\";\n\nHooks.once(\"tokenActionHudCoreApiReady\", async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n   */\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * Called by Token Action HUD Core when an action is left or right-clicked\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionClick(event, encodedValue) {\n      const [actionTypeId, actionId] = encodedValue.split(\"|\");\n\n      // const renderable = [\"item\"];\n\n      // if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n      //   return this.doRenderItem(this.actor, actionId);\n      // }\n\n      const knownCharacters = [\"character\"];\n\n      // If single actor is selected\n      if (this.actor) {\n        await this.#handleAction(\n          event,\n          this.actor,\n          this.token,\n          actionTypeId,\n          actionId\n        );\n        return;\n      }\n\n      const controlledTokens = canvas.tokens.controlled.filter((token) =>\n        knownCharacters.includes(token.actor?.type)\n      );\n\n      // If multiple actors are selected\n      for (const token of controlledTokens) {\n        const actor = token.actor;\n        await this.#handleAction(event, actor, token, actionTypeId, actionId);\n      }\n    }\n\n    /**\n     * Handle action hover\n     * Called by Token Action HUD Core when an action is hovered on or off\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionHover(event, encodedValue) {}\n\n    /**\n     * Handle group click\n     * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n     * @override\n     * @param {object} event The event\n     * @param {object} group The group\n     */\n    async handleGroupClick(event, group) {}\n\n    /**\n     * Handle action\n     * @private\n     * @param {object} event        The event\n     * @param {object} actor        The actor\n     * @param {object} token        The token\n     * @param {string} actionTypeId The action type id\n     * @param {string} actionId     The actionId\n     */\n    async #handleAction(event, actor, token, actionTypeId, actionId) {\n      switch (actionTypeId) {\n        case \"ability\":\n        case \"save\":\n        case \"attack\":\n        case \"reaction\":\n        case \"heroichealing\":\n          this.#handleRoll(event, actor, actionTypeId, actionId);\n          break;\n        case \"item\":\n          this.#handleItemAction(event, actor, actionId);\n          break;\n        // case \"utility\":\n        //   this.#handleUtilityAction(token, actionId);\n        //   break;\n      }\n    }\n\n    /**\n     * Handle item action\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    async #handleItemAction(event, actor, actionId) {\n      const isCtrl = !!event.ctrlKey;\n      const isShift = !!event.shiftKey;\n      const isAlt = !!event.altKey;\n      const item = actor.items.get(actionId);\n\n      const brokenItem = item.system.status === \"broken\";\n      const runOutItem = item.system.resources === \"run_out\";\n\n      if (event.button == 2) {\n        if (isAlt) {\n          return await item.sendToChat({ actor, collapsed: false });\n        }\n        await item.sheet.render({ force: true });\n      } else {\n        if (brokenItem || runOutItem) return;\n\n        if (isAlt) {\n          return await item.toggleReadied();\n        }\n\n        if (!item.system.readied) {\n          return;\n        }\n\n        const actionType =\n          item.system.type === \"weapon\" ? \"damage\" : item.system.type;\n        await actor.performHudAction(\n          actionType,\n          actionId,\n          {\n            label: item.name,\n            tooltip: game.i18n.format(\"SDM.RollType\", {\n              type: coreModule.api.Utils.i18n(\n                `SDM.${Utils.toPascalCase(actionType)}`\n              ),\n            }),\n          },\n          isShift,\n          isCtrl\n        );\n      }\n    }\n\n    // /**\n    //  * Handle utility action\n    //  * @private\n    //  * @param {object} token    The token\n    //  * @param {string} actionId The action id\n    //  */\n    // async #handleUtilityAction(token, actionId) {\n    //   switch (actionId) {\n    //     case \"endTurn\":\n    //       if (game.combat?.current?.tokenId === token.id) {\n    //         await game.combat?.nextTurn();\n    //       }\n    //       break;\n    //   }\n    // }\n\n    async #handleRoll(event, actor, actionTypeId, actionId) {\n      const isCtrl = !!event.ctrlKey;\n      const isShift = !!event.shiftKey;\n      await actor.performHudAction(actionTypeId, actionId, {}, isShift, isCtrl);\n    }\n  };\n});\n","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n    game.settings.register(MODULE.ID, 'displayUnequipped', {\n        name: game.i18n.localize('tokenActionHud.sdm.settings.displayUnequipped.name'),\n        hint: game.i18n.localize('tokenActionHud.sdm.settings.displayUnequipped.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            coreUpdate(value)\n        }\n    })\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler () {\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Core Template'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}              The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults () {\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        registerStyles () {\n            return {\n                sdm: {\n                    class: 'tah-style-sdm-style', // The class to add to first DIV element\n                    file: 'tah-sdm-style', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'Synthetic Dream Machine Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","ability","save","attack","roll","item","damage","power","heroDice","GROUP","abilities","id","name","type","saves","attacks","player","npc","album","weapon","combat","token","ITEM_TYPE","power_album","groupId","DEFAULTS","Hooks","once","async","coreModule","groups","Object","values","forEach","group","api","Utils","i18n","listName","groupsArray","layout","nestId","static","key","defaultValue","value","game","settings","get","Logger","debug","set","str","toLowerCase","replace","_","c","toUpperCase","ActionHandler","a","groupIds","this","actors","actor","_getActors","actorType","displayUnequipped","getSetting","items","sortItemsByName","buildCharacterActions","buildMultipleTokenActions","buildAbilities","buildSaves","buildAttacks","buildOther","buildInventory","system","actions","tooltip","encodedValue","addActions","console","log","sheet","icon1","hero_dice","max","size","actionTypeId","inventoryMap","Map","itemId","itemData","readied","typeMap","groupData","map","getNameTitle","actionTypeName","join","delimiter","status","resources","brokenItem","runOutItem","icon2","icon3","img","getImage","cssClass","getInventoryTitle","RollHandler","register","coreUpdate","localize","hint","scope","config","Boolean","default","onChange","event","actionId","split","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","filter","includes","handleRoll","handleItemAction","isCtrl","ctrlKey","isShift","shiftKey","isAlt","altKey","button","sendToChat","collapsed","render","force","toggleReadied","actionType","performHudAction","label","format","toPascalCase","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","systemSettings.register","registerStyles","sdm","class","file","moduleId","on","module","modules","requiredCoreModuleVersion","call"],"mappings":"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"}