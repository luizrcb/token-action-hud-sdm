{"version":3,"file":"token-action-hud-sdm.min.js","sources":["constants.js","utils.js","action-handler.js","roll-handler.js","defaults.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n  ID: 'token-action-hud-sdm'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n  ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '2.0.16'\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n  ability: 'Ability',\n  save: 'Save',\n  attack: 'Attack',\n  roll: 'Roll',\n  item: 'Item',\n  damage: 'Damage',\n  power: 'Power',\n  heroDice: 'Hero Dice'\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n  abilities: { id: 'abilities', name: 'SDM.FieldAbilitiesPl', type: 'system' },\n  saves: { id: 'saves', name: 'SDM.FieldSavePl', type: 'system' },\n  attacks: { id: 'attacks', name: 'SDM.FieldAttackPl', type: 'system' },\n  player: { id: 'player', name: 'TYPES.Actor.character', type: 'system' },\n  npc: { id: 'npc', name: 'TYPES.Actor.npc', type: 'system' },\n  caravan: { id: 'caravan', name: 'TYPES.Actor.caravan', type: 'system' },\n  album: {\n    id: 'power_album',\n    name: 'TYPES.Item.power_album',\n    type: 'system'\n  },\n  weapon: { id: 'weapon', name: 'TYPES.Item.weapon', type: 'system' },\n  power: { id: 'power', name: 'TYPES.Item.power', type: 'system' },\n\n  combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n  token: { id: 'token', name: 'tokenActionHud.token', type: 'system' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n  power_album: { groupId: 'power_album' },\n  power: { groupId: 'power' },\n  weapon: { groupId: 'weapon' }\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Utility functions\n   */\n  Utils = class Utils {\n    /**\n     * Get setting\n     * @param {string} key               The key\n     * @param {string=null} defaultValue The default value\n     * @returns {string}                 The setting value\n     */\n    static getSetting (key, defaultValue = null) {\n      let value = defaultValue ?? null\n      try {\n        value = game.settings.get(MODULE.ID, key)\n      } catch {\n        coreModule.api.Logger.debug(`Setting '${key}' not found`)\n      }\n      return value\n    }\n\n    /**\n     * Set setting\n     * @param {string} key   The key\n     * @param {string} value The value\n     */\n    static async setSetting (key, value) {\n      try {\n        value = await game.settings.set(MODULE.ID, key, value)\n        coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n      } catch {\n        coreModule.api.Logger.debug(`Setting '${key}' not found`)\n      }\n    }\n\n    static toPascalCase (str) {\n      return str\n        .toLowerCase()\n        .replace(/(^|\\s)(\\p{L})/gu, (match, sep, ch) => sep + ch.toUpperCase())\n    }\n  }\n})\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE } from './constants.js'\nimport { Utils } from './utils'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n   */\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    /**\n     * Build system actions\n     * Called by Token Action HUD Core\n     * @override\n     * @param {array} groupIds\n     */ a\n    async buildSystemActions (groupIds) {\n      // Set actor and token variables\n      this.actors = !this.actor ? this._getActors() : [this.actor]\n      this.actorType = this.actor?.type\n\n      // Set items variable\n      if (this.actor) {\n        let items = this.actor.items\n        items = coreModule.api.Utils.sortItemsByName(items)\n        this.items = items\n      }\n\n      if (this.actorType === 'character') {\n        this.#buildCharacterActions()\n      } else if (this.actorType === 'npc') {\n        this.#buildNPCActions()\n      } else if (this.actorType === 'caravan') {\n        this.#buildCaravanActions()\n      }\n    }\n\n    /**\n     * Build character actions\n     * @private\n     */\n    #buildCharacterActions () {\n      this.#buildAbilities()\n      this.#buildSaves()\n      this.#buildAttacks()\n      this.#buildCharacterOther()\n      this.#buildInventory()\n    }\n\n    /**\n     * Build NPC Actions\n     * @private\n     * @returns {object}\n     */\n    #buildNPCActions () {\n      this.#buildNPCombatActions()\n      this.#buildNPCOther()\n      this.#buildInventory()\n    }\n\n    async #buildAbilities () {\n      if (!this.actor) return\n\n      // const abilities = data.abilities;\n      const groupData = { id: 'abilities', type: 'system' }\n      const actions = [\n        {\n          id: `${this.actor.id}-str`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityStrAbbr').toUpperCase(),\n          tooltip: coreModule.api.Utils.i18n('SDM.AbilityStr'),\n          listName: 'Ability: Strength',\n          encodedValue: 'ability|str'\n        },\n        {\n          id: `${this.actor.id}-end`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityEndAbbr').toUpperCase(),\n          tooltip: coreModule.api.Utils.i18n('SDM.AbilityEnd'),\n          listName: 'Ability: Endurance',\n          encodedValue: 'ability|end'\n        },\n        {\n          id: `${this.actor.id}-agi`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityAgiAbbr').toUpperCase(),\n          tooltip: coreModule.api.Utils.i18n('SDM.AbilityAgi'),\n          listName: 'Ability: Agility',\n          encodedValue: 'ability|agi'\n        },\n        {\n          id: `${this.actor.id}-cha`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityChaAbbr').toUpperCase(),\n          tooltip: coreModule.api.Utils.i18n('SDM.AbilityCha'),\n          listName: 'Ability: Charisma',\n          encodedValue: 'ability|cha'\n        },\n        {\n          id: `${this.actor.id}-aur`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityAurAbbr').toUpperCase(),\n          tooltip: coreModule.api.Utils.i18n('SDM.AbilityAur'),\n          listName: 'Ability: Aura',\n          encodedValue: 'ability|aur'\n        },\n        {\n          id: `${this.actor.id}-tho`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityThoAbbr').toUpperCase(),\n          tooltip: coreModule.api.Utils.i18n('SDM.AbilityTho'),\n          listName: 'Ability: Thought',\n          encodedValue: 'ability|tho'\n        }\n      ]\n      this.addActions(actions, groupData)\n    }\n\n    async #buildSaves () {\n      if (!this.actor) return\n\n      // const abilities = data.abilities;\n      const groupData = { id: 'saves', type: 'system' }\n      const actions = [\n        {\n          id: `${this.actor.id}-save-str`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityStrAbbr').toUpperCase(),\n          icon1: '<i class=\"fa-solid fa-hand-fist rust\"></i>',\n          tooltip: game.i18n.format('SDM.SavingThrowRoll', {\n            ability: coreModule.api.Utils.i18n('SDM.AbilityStr')\n          }),\n          listName: 'Save: Strength',\n          encodedValue: 'save|str'\n        },\n        {\n          id: `${this.actor.id}-save-end`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityEndAbbr').toUpperCase(),\n          icon1: '<i class=\"fa-solid fa-heartbeat pumpkin\"></i>',\n          tooltip: game.i18n.format('SDM.SavingThrowRoll', {\n            ability: coreModule.api.Utils.i18n('SDM.AbilityEnd')\n          }),\n          listName: 'Save: Endurance',\n          encodedValue: 'save|end'\n        },\n        {\n          id: `${this.actor.id}-save-agi`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityAgiAbbr').toUpperCase(),\n          icon1: '<i class=\"fa-solid fa-person-running amber\"></i>',\n          tooltip: game.i18n.format('SDM.SavingThrowRoll', {\n            ability: coreModule.api.Utils.i18n('SDM.AbilityAgi')\n          }),\n          listName: 'Save: Agility',\n          encodedValue: 'save|agi'\n        },\n        {\n          id: `${this.actor.id}-save-cha`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityChaAbbr').toUpperCase(),\n          icon1: '<i class=\"fa-solid fa-clover sky\"></i>',\n          tooltip: game.i18n.format('SDM.SavingThrowRoll', {\n            ability: coreModule.api.Utils.i18n('SDM.AbilityCha')\n          }),\n          listName: 'Save: Charisma',\n          encodedValue: 'save|cha'\n        },\n        {\n          id: `${this.actor.id}-save-aur`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityAurAbbr').toUpperCase(),\n          icon1: '<i class=\"fa-solid fa-splotch azure\"></i>',\n          tooltip: game.i18n.format('SDM.SavingThrowRoll', {\n            ability: coreModule.api.Utils.i18n('SDM.AbilityAur')\n          }),\n          listName: 'Save: Aura',\n          encodedValue: 'save|aur'\n        },\n        {\n          id: `${this.actor.id}-save-tho`,\n          name: coreModule.api.Utils.i18n('SDM.AbilityThoAbbr').toUpperCase(),\n          icon1: '<i class=\"fa-solid fa-cloud royal\"></i>',\n          tooltip: game.i18n.format('SDM.SavingThrowRoll', {\n            ability: coreModule.api.Utils.i18n('SDM.AbilityTho')\n          }),\n          listName: 'Save: Thought',\n          encodedValue: 'save|tho'\n        }\n      ]\n      this.addActions(actions, groupData)\n    }\n\n    async #buildAttacks () {\n      if (!this.actor) return\n\n      // const abilities = data.abilities;\n      const groupData = { id: 'attacks', type: 'system' }\n      const actions = [\n        {\n          id: `${this.actor.id}-melee`,\n          name: coreModule.api.Utils.i18n('SDM.AttackMelee'),\n          listName: 'Attack: Melee',\n          encodedValue: 'attack|melee'\n        },\n        {\n          id: `${this.actor.id}-ranged`,\n          name: coreModule.api.Utils.i18n('SDM.AttackRanged'),\n          listName: 'Attack: Ranged',\n          encodedValue: 'attack|ranged'\n        },\n        {\n          id: `${this.actor.id}-fantascience`,\n          name: coreModule.api.Utils.i18n('SDM.AttackFantascience'),\n          listName: 'Attack: Fantascience',\n          encodedValue: 'attack|fantascience'\n        },\n        {\n          id: `${this.actor.id}-oldtech`,\n          name: coreModule.api.Utils.i18n('SDM.AttackOldtech'),\n          listName: 'Attack: Oldtech',\n          encodedValue: 'attack|oldtech'\n        }\n      ]\n      this.addActions(actions, groupData)\n    }\n\n    async #buildCharacterOther () {\n      if (!this.actor) return\n\n      // const data = this.actor.system;\n      const heroDice = this.actor.system.hero_dice\n      const groupData = { id: 'player', type: 'system' }\n\n      const actions = [\n        {\n          id: `${this.actor.id}-reaction`,\n          name: coreModule.api.Utils.i18n('SDM.Reaction'),\n          icon1: '<i class=\"fa-solid fa-masks-theater\"></i>',\n          listName: 'Other: Reaction',\n          encodedValue: 'reaction|reaction'\n        },\n        {\n          id: `${this.actor.id}-hero-dice`,\n          name: `${Utils.toPascalCase(coreModule.api.Utils.i18n('SDM.HeroDice'))}: ${heroDice.value}/${heroDice.max}`,\n          icon1: '<i class=\"fa-solid fa-dice-d6\"></i>',\n          tooltip: Utils.toPascalCase(coreModule.api.Utils.i18n('SDM.HeroDice')),\n          listName: 'Other: Hero Dice',\n          encodedValue: 'heroichealing|heroichealing'\n        }\n      ]\n\n      this.addActions(actions, groupData)\n    }\n\n    async #buildNPCombatActions () {\n      const style = game.settings.get('token-action-hud-core', 'style')\n      const attackGroup = { id: 'attacks', type: 'system' }\n      const attackActions = [\n        {\n          id: `${this.actor.id}-attack`,\n          name: game.i18n.format('SDM.RollType', { type: coreModule.api.Utils.i18n('SDM.Attack') }),\n          tooltip: game.i18n.format('SDM.RollType', { type: coreModule.api.Utils.i18n('SDM.Attack') }),\n          icon1: `<i class=\"melee-attack ${\n            style.includes('Light') || style.includes('pathfinder')\n              ? ''\n              : 'white'\n          }\"></i>`,\n          listName: 'attack: Attack Roll',\n          encodedValue: 'attack|attack'\n        },\n        {\n          id: `${this.actor.id}-damage`,\n          name: game.i18n.format('SDM.RollType', { type: coreModule.api.Utils.i18n('SDM.Damage') }),\n          tooltip: game.i18n.format('SDM.RollType', { type: coreModule.api.Utils.i18n('SDM.Damage') }),\n          icon1: '<i class=\"fa-solid fa-explosion\"></i>',\n          listName: 'Damage: rollNPCDamage',\n          encodedValue: 'rollNPCDamage|rollNPCDamage'\n        }\n      ]\n\n      this.addActions(attackActions, attackGroup)\n\n      const savesGroup = { id: 'saves', type: 'system' }\n      const saveActions = [\n        {\n          id: `${this.actor.id}-save`,\n          name: game.i18n.format('SDM.RollType', { type: coreModule.api.Utils.i18n('SDM.FieldSaveTarget') }),\n          tooltip: game.i18n.format('SDM.SavingThrowRoll', { ability: coreModule.api.Utils.i18n('TYPES.Actor.npc') }),\n          icon1: '<i class=\"fa fa-shield-cat\"></i>',\n          listName: 'attack: Attack Roll',\n          encodedValue: 'save|npc'\n        }\n      ]\n\n      this.addActions(saveActions, savesGroup)\n    }\n\n    async #buildNPCOther () {\n      if (!this.actor) return\n\n      const groupData = { id: 'npc', type: 'system' }\n\n      const actions = [\n        {\n          id: `${this.actor.id}-morale`,\n          name: game.i18n.format('SDM.RollType', { type: coreModule.api.Utils.i18n('SDM.Morale') }),\n          icon1: '<i class=\"fa-solid fa-person-running\"></i>',\n          listName: 'Other: Morale',\n          encodedValue: 'rollNPCMorale|rollNPCMorale'\n        }\n      ]\n\n      this.addActions(actions, groupData)\n    }\n\n    async #buildCaravanActions () {\n      const groupData = { id: 'caravan', type: 'system' }\n\n      const actions = [\n        {\n          id: `${this.actor.id}-consume-supply`,\n          name: coreModule.api.Utils.i18n('SDM.ConsumeSupply'),\n          icon1: '<i class=\"fa fa-sack-xmark\"></i>',\n          listName: 'Other: Consume Supplies',\n          encodedValue: 'consumeSupplies|consumeSupplies'\n        }\n      ]\n\n      this.addActions(actions, groupData)\n    }\n\n    /**\n     * Build inventory\n     * @private\n     */\n    async #buildInventory () {\n      if (this.items.size === 0) return\n\n      const actionTypeId = 'item'\n      const inventoryMap = new Map()\n\n      for (const [itemId, itemData] of this.items) {\n        const system = itemData.system\n        const type = system.type\n        const typeMap = inventoryMap.get(type) ?? new Map()\n        typeMap.set(itemId, itemData)\n        inventoryMap.set(type, typeMap)\n      }\n\n      for (const [type, typeMap] of inventoryMap) {\n        const groupId = ITEM_TYPE[type]?.groupId\n\n        if (!groupId) continue\n\n        const groupData = { id: groupId, type: 'system' }\n\n        // Get actions\n        const actions = [...typeMap].map(([itemId, itemData]) => {\n          const id = itemId\n          const name = itemData.getNameTitle()\n          const actionTypeName = coreModule.api.Utils.i18n(\n            ACTION_TYPE[actionTypeId]\n          )\n          const listName = `${\n            actionTypeName ? `${actionTypeName}: ` : ''\n          }${name}`\n          const encodedValue = [actionTypeId, id].join(this.delimiter)\n          const status = itemData.system.status\n          const resources = itemData.system.resources\n\n          const brokenItem = status === 'broken'\n          const runOutItem = resources === 'run_out'\n\n          const icon1 =\n            status === 'notched'\n              ? '<i class=\"fa fa-hammer\"></i>'\n              : status === 'broken'\n                ? '<i class=\"fa fa-ban\"></i>'\n                : ''\n          const icon2 =\n            resources === 'running_low'\n              ? '<i class=\"fa-solid fa-battery-quarter\"></i>'\n              : resources === 'run_out'\n                ? '<i class=\"fa-solid fa-battery-empty\"></i>'\n                : ''\n          const icon3 = (itemData.system.readied || itemData.type === 'trait')\n            ? '<i class=\"fa fa-shield\"></i>'\n            : ''\n\n          return {\n            id,\n            name,\n            img: coreModule.api.Utils.getImage(itemData),\n            icon1,\n            icon2,\n            icon3,\n            cssClass: brokenItem || runOutItem ? 'disabled' : '',\n            tooltip: itemData.getInventoryTitle(),\n            listName,\n            encodedValue\n          }\n        })\n\n        // TAH Core method to add actions to the action list\n        this.addActions(actions, groupData)\n      }\n    }\n  }\n})\n","import { Utils } from './utils.js'\nexport let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n   */\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * Called by Token Action HUD Core when an action is left or right-clicked\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionClick (event, encodedValue) {\n      const [actionTypeId, actionId] = encodedValue.split('|')\n\n      // const renderable = [\"item\"];\n\n      // if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n      //   return this.doRenderItem(this.actor, actionId);\n      // }\n\n      const knownCharacters = ['character']\n\n      // If single actor is selected\n      if (this.actor) {\n        await this.#handleAction(\n          event,\n          this.actor,\n          this.token,\n          actionTypeId,\n          actionId\n        )\n        return\n      }\n\n      const controlledTokens = canvas.tokens.controlled.filter((token) =>\n        knownCharacters.includes(token.actor?.type)\n      )\n\n      // If multiple actors are selected\n      for (const token of controlledTokens) {\n        const actor = token.actor\n        await this.#handleAction(event, actor, token, actionTypeId, actionId)\n      }\n    }\n\n    /**\n     * Handle action hover\n     * Called by Token Action HUD Core when an action is hovered on or off\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionHover (event, encodedValue) {}\n\n    /**\n     * Handle group click\n     * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n     * @override\n     * @param {object} event The event\n     * @param {object} group The group\n     */\n    async handleGroupClick (event, group) {}\n\n    /**\n     * Handle action\n     * @private\n     * @param {object} event        The event\n     * @param {object} actor        The actor\n     * @param {object} token        The token\n     * @param {string} actionTypeId The action type id\n     * @param {string} actionId     The actionId\n     */\n    async #handleAction (event, actor, token, actionTypeId, actionId) {\n      switch (actionTypeId) {\n      case 'ability':\n      case 'save':\n      case 'attack':\n      case 'reaction':\n      case 'heroichealing':\n      case 'rollNPCDamage':\n      case 'rollNPCMorale':\n        this.#handleRoll(event, actor, actionTypeId, actionId)\n        break\n      case 'item':\n        this.#handleItemAction(event, actor, actionId)\n        break\n        // case \"utility\":\n        //   this.#handleUtilityAction(token, actionId);\n        //   break;\n      case 'consumeSupplies':\n        this.#handleConsumeSupplies(event, actor)\n        break\n      }\n    }\n\n    /**\n     * Handle item action\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    async #handleItemAction (event, actor, actionId) {\n      const isCtrl = !!event.ctrlKey\n      const isShift = !!event.shiftKey\n      const isAlt = !!event.altKey\n      const item = actor.items.get(actionId)\n\n      const brokenItem = item.system.status === 'broken'\n      const runOutItem = item.system.resources === 'run_out'\n\n      if (event.button === 2) {\n        if (isAlt) {\n          return await item.sendToChat({ actor, collapsed: false })\n        }\n        await item.sheet.render({ force: true })\n      } else {\n        if (brokenItem || runOutItem) return\n\n        if (isAlt) {\n          return await item.toggleReadied()\n        }\n\n        if (!item.system.readied && item.type !== 'trait') {\n          return\n        }\n\n        const actionType =\n          item.system.type === 'weapon' ? 'damage' : item.system.type\n        await actor.performHudAction(\n          actionType,\n          actionId,\n          {\n            label: item.name,\n            tooltip: game.i18n.format('SDM.RollType', {\n              type: coreModule.api.Utils.i18n(\n                `SDM.${Utils.toPascalCase(actionType)}`\n              )\n            })\n          },\n          isShift,\n          isCtrl\n        )\n      }\n    }\n\n    // /**\n    //  * Handle utility action\n    //  * @private\n    //  * @param {object} token    The token\n    //  * @param {string} actionId The action id\n    //  */\n    // async #handleUtilityAction(token, actionId) {\n    //   switch (actionId) {\n    //     case \"endTurn\":\n    //       if (game.combat?.current?.tokenId === token.id) {\n    //         await game.combat?.nextTurn();\n    //       }\n    //       break;\n    //   }\n    // }\n\n    async #handleRoll (event, actor, actionTypeId, actionId) {\n      const isCtrl = !!event.ctrlKey\n      const isShift = !!event.shiftKey\n      await actor.performHudAction(actionTypeId, actionId, {}, isShift, isCtrl)\n    }\n\n    async #handleConsumeSupplies (event, actor) {\n      return await actor.consumeSupplies()\n    }\n  }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  const groups = GROUP\n  Object.values(groups).forEach((group) => {\n    group.name = coreModule.api.Utils.i18n(group.name)\n    group.listName = `Group: ${coreModule.api.Utils.i18n(\n      group.listName ?? group.name\n    )}`\n  })\n  const groupsArray = Object.values(groups)\n  DEFAULTS = {\n    layout: [\n      {\n        nestId: 'abilities',\n        id: 'abilities',\n        name: coreModule.api.Utils.i18n('SDM.FieldAbilitiesPl'),\n        groups: [{ ...groups.abilities, nestId: 'abilities_abilities' }]\n      },\n      {\n        nestId: 'saves',\n        id: 'saves',\n        name: coreModule.api.Utils.i18n('SDM.FieldSavePl'),\n        groups: [{ ...groups.saves, nestId: 'saves_saves' }]\n      },\n      {\n        nestId: 'attacks',\n        id: 'attacks',\n        name: coreModule.api.Utils.i18n('SDM.FieldAttackPl'),\n        groups: [{ ...groups.attacks, nestId: 'attacks_attacks' }]\n      },\n      {\n        nestId: 'other',\n        id: 'other',\n        name: coreModule.api.Utils.i18n('SDM.FieldOther'),\n        groups: [\n          { ...groups.player, nestId: 'other_player' },\n          { ...groups.caravan, nestId: 'other_caravan' },\n          { ...groups.npc, nestId: 'other_npc' }\n        ]\n      },\n      {\n        nestId: 'inventory',\n        id: 'inventory',\n        name: coreModule.api.Utils.i18n('SDM.TabInventory'),\n        groups: [\n          { ...groups.album, nestId: 'inventory_album' },\n          { ...groups.power, nestId: 'inventory_power' },\n          { ...groups.weapon, nestId: 'inventory_weapon' }\n        ]\n      }\n      // {\n      //   nestId: \"utility\",\n      //   id: \"utility\",\n      //   name: coreModule.api.Utils.i18n(\"tokenActionHud.utility\"),\n      //   groups: [\n      //     { ...groups.combat, nestId: \"utility_combat\" },\n      //     { ...groups.token, nestId: \"utility_token\" },\n      //     { ...groups.utility, nestId: \"utility_utility\" },\n      //   ],\n      // },\n    ],\n    groups: groupsArray\n  }\n})\n","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's SystemManager class\n   */\n  SystemManager = class SystemManager extends coreModule.api.SystemManager {\n    /**\n     * Returns an instance of the ActionHandler to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {class} The ActionHandler instance\n     */\n    getActionHandler () {\n      return new ActionHandler()\n    }\n\n    /**\n     * Returns a list of roll handlers to Token Action HUD Core\n     * Used to populate the Roll Handler module setting choices\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {object} The available roll handlers\n     */\n    getAvailableRollHandlers () {\n      const coreTitle = 'Core Template'\n      const choices = { core: coreTitle }\n      return choices\n    }\n\n    /**\n     * Returns an instance of the RollHandler to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @param {string} rollHandlerId The roll handler ID\n     * @returns {class}              The RollHandler instance\n     */\n    getRollHandler (rollHandlerId) {\n      let rollHandler\n      switch (rollHandlerId) {\n      case 'core':\n      default:\n        rollHandler = new Core()\n        break\n      }\n      return rollHandler\n    }\n\n    /**\n     * Returns the default layout and groups to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @returns {object} The default layout and groups\n     */\n    async registerDefaults () {\n      return DEFAULTS\n    }\n\n    /**\n     * Register Token Action HUD system module settings\n     * Called by Token Action HUD Core\n     * @override\n     * @param {function} coreUpdate The Token Action HUD Core update function\n     */\n    registerSettings (coreUpdate) {\n      systemSettings.register(coreUpdate)\n    }\n\n    /**\n     * Returns styles to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {object} The TAH system styles\n     */\n    registerStyles () {\n      return {\n        sdm: {\n          class: 'tah-style-sdm-style', // The class to add to first DIV element\n          file: 'tah-sdm-style', // The file without the css extension\n          moduleId: MODULE.ID, // The module ID\n          name: 'Synthetic Dream Machine Style' // The name to display in the Token Action HUD Core 'Style' module setting\n        }\n      }\n    }\n  }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n  /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n  const module = game.modules.get(MODULE.ID)\n  module.api = {\n    requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n    SystemManager\n  }\n  Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","ability","save","attack","roll","item","damage","power","heroDice","GROUP","abilities","id","name","type","saves","attacks","player","npc","caravan","album","weapon","combat","token","ITEM_TYPE","power_album","groupId","Utils","Hooks","once","async","coreModule","static","key","defaultValue","value","game","settings","get","api","Logger","debug","set","str","toLowerCase","replace","match","sep","ch","toUpperCase","ActionHandler","a","groupIds","this","actors","actor","_getActors","actorType","items","sortItemsByName","buildCharacterActions","buildNPCActions","buildCaravanActions","buildAbilities","buildSaves","buildAttacks","buildCharacterOther","buildInventory","buildNPCombatActions","buildNPCOther","actions","i18n","tooltip","listName","encodedValue","addActions","icon1","format","system","hero_dice","toPascalCase","max","style","attackActions","includes","saveActions","size","actionTypeId","inventoryMap","Map","itemId","itemData","typeMap","groupData","map","getNameTitle","actionTypeName","join","delimiter","status","resources","brokenItem","runOutItem","icon2","icon3","readied","img","getImage","cssClass","getInventoryTitle","RollHandler","event","actionId","split","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","filter","group","handleRoll","handleItemAction","handleConsumeSupplies","isCtrl","ctrlKey","isShift","shiftKey","isAlt","altKey","button","sendToChat","collapsed","sheet","render","force","toggleReadied","actionType","performHudAction","label","consumeSupplies","DEFAULTS","register","coreUpdate","groups","Object","values","forEach","groupsArray","layout","nestId","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","registerStyles","sdm","class","file","moduleId","on","module","modules","requiredCoreModuleVersion","call"],"mappings":"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"}